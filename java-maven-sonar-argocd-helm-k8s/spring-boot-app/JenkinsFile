pipeline {
  agent {
    docker {
      image 'uwadon01/maven-uwadon1-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock --add-host sonarqube:54.245.159.36'
    }
  }

  environment {
    SONAR_URL = "http://sonarqube:9000"  // Using hostname mapping
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "Uwadon1"
    DOCKER_IMAGE = "uwadon01/ultimate-cicd:${BUILD_NUMBER}"
  }

  stages {
    stage('Pre-Check: Verify SonarQube Access') {
      steps {
        sh """
          echo "Testing connection to SonarQube..."
          curl -v ${SONAR_URL}/api/system/status || echo "Connection test failed"
          ping -c 2 sonarqube || echo "Ping test failed"
        """
      }
    }

    stage('Checkout') {
      steps {
        git branch: 'main', 
        url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
      }
    }

    stage('Build and Test') {
      steps {
        sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package"
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh """
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            
            # Nuclear cleanup of any conflicting configs
            rm -f sonar-project.properties 2>/dev/null || true
            rm -f ~/.m2/settings.xml 2>/dev/null || true
            
            # Run analysis with forced configuration
            mvn sonar:sonar \\
              -Dsonar.host.url=${SONAR_URL} \\
              -Dsonar.login=${SONAR_AUTH_TOKEN} \\
              -Dsonar.forceAuthentication=true \\
              -Djava.net.preferIPv4Stack=true
          """
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} ."
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            docker.image("${DOCKER_IMAGE}").push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "uwadon1@gmail.com"
            git config user.name "Uwadone Joshua"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
          '''
        }
      }
    }
  }

  post {
    always {
      sh """
        echo "Pipeline completed with status: ${currentBuild.result}"
        echo "SonarQube analysis available at: ${SONAR_URL}/dashboard?id=com.abhishek:spring-boot-demo"
      """
    }
  }
}
